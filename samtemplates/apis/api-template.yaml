AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  tagesdashboard-sam - APIs

  SAM Template for tagesdashboard-sam APIs

Parameters:
  AWSENVNAME:
    Type: String
    Description: AWS Env where SAM is being executed (AWS_SAM_LOCAL or AWS)
  CognitoUserPoolId:
    Description: The Cognito User Pool ID
    Type: String
  CognitoClientId:
    Type: String
    Description:  The Client ID for use of the Cognito User Pool for authenticating against APIs 
  TasksTableName:
    Description:  The name of the TagesdashboardTasks DyanmoDB Table
    Type: String

Resources:
  GetTasksApi:
    Type:  AWS::Serverless::Api
    Properties:
      EndpointConfiguration:
        Type: REGIONAL
      StageName: Sandbox
      Auth:
        DefaultAuthorizer: TdbCognitoAuth
        Authorizers:
          TdbCognitoAuth:
            UserPoolArn: !Sub 
              - "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"
              - CognitoUserPoolId: !Ref CognitoUserPoolId
            Identity:
              Header: Authorization
  GetTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../awslambda/tasks/
      Handler: get_tasks.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Architectures:
        - x86_64
      Events:
        GetTasks:
          Type: Api
          Properties:
            Path: /tasks
            Method: get
            RestApiId: !Ref GetTasksApi
            Auth:
              Authorizer: TdbCognitoAuth
      Environment:
        Variables:
          AWSENV: !Ref AWSENVNAME
          USERPOOL: !Ref CognitoUserPoolId
          CLIENT_ID: !Ref CognitoClientId
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTableName

Outputs:
  GetTasksApi:
    Value:  !Ref GetTasksApi
  GetTasksFunction:
    Value: !GetAtt GetTasksFunction.Arn
  GetTasksFunctionRole:
    Value: !GetAtt GetTasksFunctionRole.Arn